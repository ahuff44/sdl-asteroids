#!/usr/bin/env python

import subprocess
from sys import argv, exit
import os

def bash(cmdstr):
  print cmdstr
  p = subprocess.Popen(["/bin/bash", "-c", cmdstr])
  p.communicate() # wait for the process to end

ENTRY = "src/main.c"
OFILE = "./out/a"
OFILE_EM = "out/index.html"
SHELL_FILE = "src/shell.html"
COMPILE = "clang {ENTRY} -o {OFILE} -I ~/Library/Frameworks/SDL2.framework/Headers -I ~/Library/Frameworks/SDL2_image.framework/Headers -I ~/Library/Frameworks/SDL2_mixer.framework/Headers -I ~/Library/Frameworks/SDL2_ttf.framework/Headers -F ~/Library/Frameworks -framework SDL2 -framework SDL2_Image -framework SDL2_Mixer -framework SDL2_TTF".format(**locals())
options = {
  "": "{COMPILE} && DEBUG=1 {OFILE}".format(**locals()),
  "clean": "trash out/* && ls -l out/",
  "compile": COMPILE,
  "emscripten": "emcc {ENTRY} -o {OFILE_EM} --preload-file data --use-preload-plugins --shell-file {SHELL_FILE} -s WASM=1 -s EXIT_RUNTIME=1 -s USE_SDL=2 -s USE_SDL_IMAGE=2 -s USE_SDL_MIXER=2 -s USE_SDL_TTF=2 -s DISABLE_DEPRECATED_FIND_EVENT_TARGET_BEHAVIOR=1 -s TOTAL_MEMORY=512MB".format(**locals()),
}


def matchPrefix(prefix, options):
  prefix = prefix.lower().strip()
  if prefix in options:
    return prefix
  foundOpt = None
  for opt in options:
    if opt.startswith(prefix):
      if foundOpt is None:
        foundOpt = opt
      else:
        raise Exception("Multiple options match prefix '%s' ('%s', '%s', maybe others)"%(prefix, foundOpt, opt))
  return foundOpt

if len(argv) > 2:
  print "Usage: ./build [{}]".format('|'.join(options.keys()))
  exit(1)
if len(argv) == 1:
  prefix = ""
else:
  prefix = argv[1]


match = matchPrefix(prefix, options.keys())
if match is None:
  raise Exception("No matching option found")
else:
  # print "Running '%s'"%match
  if match == "emscripten" and not os.getenv("EMSDK"):
    print "need to load emcc:"
    print "\tsource ~/projects/emsdk/emsdk_env.sh"
    exit(1)

  cmdstr = options[match]
  bash(cmdstr)
